Benchmarking suite for the AEminium runtime.

Developed in distinct phases:

* Compiler
	A java to java compiler that translates regular java (within limitations) to
	AEminium Tasks and Runtime

* Unit Tester
	A jUnit project that validates the results of the compiler

* Benchmark
	An automated benchmarking script that lauches several sets of tests.

TODO:
	Build EAST
	
	Optimize EAST
		-> select nodes to paralellize and nodes to serialize
		conservative rule:
			MethodInvocations (and ClassInstanceCreations?) are always in tasks
			a node with exactly 1 dependent is placed in the same task as the dependent (dependent = a task waiting for "my" conclusion)
			nodes with no dependent are task roots:


	Translate EAST
		if (this.isRoot())
		{
			build new task body;
			body.add(this.build())
	
			stmts.add( scheduling ) 
		} else
			stmts.add(this.build())
		
FIXME:
	after a conditional statement (if, while, statement) task has been executed it should be possible to
	cancel child tasks:
		it can be done by modifying the code, or directly allowing it in the runtime
		(maybe having execute return a boolean? or call a Runtime.removeChilds(asdasd) )

	if (.........)
		return x;

	x.method()

